// Author:  unknown
using System;
using System.Collections.Generic;
using System.CommandLine.Invocation;
using System.CommandLine;
using codeBundler.Services;
namespace codeBundler.Commands
{
    public static class BundleCommand
    {
        public static Command CreateCommand()
        {
            var command = new Command("bundle", "Bundle code files into a single file.");
            var languageOption = new Option<string>(
                new[] { "--language", "-l" },
                "Programming language to include (e.g., cs, js, all)");
            languageOption.IsRequired = true;
            command.AddOption(languageOption);
            var outputOption = new Option<string?>(
                new[] { "--output", "-o" },
                "Output path for the bundled file (default: 'bundle.txt').");
            command.AddOption(outputOption);
            var noteOption = new Option<bool>(
                new[] { "--note", "-n" },
                "Include file names and paths as comments.");
            command.AddOption(noteOption);
            var sortOption = new Option<string>(
                new[] { "--sort", "-s" },
                () => "filename",
                "Sorting order (filename or type).");
            command.AddOption(sortOption);
            var removeEmptyLinesOption = new Option<bool>(
                new[] { "--remove-empty-lines", "-r" },
                "Remove empty lines from code files.");
            command.AddOption(removeEmptyLinesOption);
            var authorOption = new Option<string?>(
                new[] { "--author", "-a" },
                "Include the author's name as a comment at the top.");
            command.AddOption(authorOption);
            // Bind the handler
            command.SetHandler(
             (string language, string? output, bool note, string sort, bool removeEmptyLines, string? author) =>
             {
                 BundlerService.BundleFiles(language, output, note, sort, removeEmptyLines, author);
             },
             languageOption, outputOption, noteOption, sortOption, removeEmptyLinesOption, authorOption);
            return command;
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
namespace codeBundler.Services
{
    public static class BundlerService
    {
        public static void BundleFiles(string language, string? output, bool note, string sort, bool removeEmptyLines, string? author)
        {
            var directory = Directory.GetCurrentDirectory();
            IEnumerable<string> filesInDirectory = Directory.GetFiles(directory, "*.*", SearchOption.AllDirectories);
            IEnumerable<string> files;
            if (language.Trim().ToLower() == "all")
            {
                files = filesInDirectory
                            .Where(file => !file.Contains("bin", StringComparison.OrdinalIgnoreCase)
                                           && !file.Contains("obj", StringComparison.OrdinalIgnoreCase)
                                           && Path.GetFileName(file) != output
                                           && Path.GetFileName(file) != "bundle.rsp")
                            .ToList();
            }
            else
            {
                files = filesInDirectory
                            .Where(file => Path.GetExtension(file).Equals("." + language.Trim(), StringComparison.OrdinalIgnoreCase)
                                           && !file.Contains("bin", StringComparison.OrdinalIgnoreCase)
                                           && !file.Contains("obj", StringComparison.OrdinalIgnoreCase)
                                           )
                            .ToList();
            }
            if (!files.Any())
            {
                Console.WriteLine("No files found to bundle.");
                return;
            }
            output ??= "bundle.txt";
            using (var writer = new StreamWriter(output))
            {
                if (author != null)
                {
                    writer.WriteLine($"// Author: {author}");
                }
                foreach (var file in files.OrderBy(f => sort == "type" ? Path.GetExtension(f) : Path.GetFileName(f)))
                {
                    if (note)
                    {
                        writer.WriteLine($"// File: {file}");
                    }
                    var lines = File.ReadAllLines(file);
                    if (removeEmptyLines)
                    {
                        lines = lines.Where(line => !string.IsNullOrWhiteSpace(line)).ToArray();
                    }
                    foreach (var line in lines)
                    {
                        writer.WriteLine(line);
                    }
                }
            }
            Console.WriteLine($"Files bundled into {output}");
        }
    }
}
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="System.CommandLine" Version="2.0.0-beta4.22272.1" />
  </ItemGroup>
</Project>
using System;
using System.CommandLine;
using System.IO;
namespace codeBundler.Commands
{
    public static class CreateRspCommand
    {
        public static Command CreateCommand()
        {
            var command = new Command("create-rsp", "Create a response file for the 'bundle' command.");
            command.SetHandler(() =>
            {
                Console.WriteLine("Enter values for the following options:");
                Console.Write("Language (e.g., cs, js, all): ");
                var language = Console.ReadLine()?.Trim();
                if (string.IsNullOrEmpty(language))
                {
                    language = "all"; 
                }
                string output = "bundle.txt"; 
                while (true)
                {
                    Console.Write("Output file path (must be a valid file, default 'bundle.txt'): ");
                    var userOutput = Console.ReadLine()?.Trim();
                    if (string.IsNullOrEmpty(userOutput)) 
                    {
                        break; 
                    }
                    if (!userOutput.Contains('.'))
                    {
                        Console.WriteLine("Invalid file path. A file extension is required (e.g., .txt, .rsp).");
                    }
                    else
                    {
                        output = userOutput; 
                        break;
                    }
                }
                bool note = false;
                while (true)
                {
                    Console.Write("Include notes (true/false, default false): ");
                    var noteInput = Console.ReadLine()?.Trim();
                    if (string.IsNullOrEmpty(noteInput))
                    {
                        break; 
                    }
                    if (bool.TryParse(noteInput, out note))
                    {
                        break;
                    }
                    Console.WriteLine("Invalid input. Please enter 'true' or 'false' for notes.");
                }
                string sort;
                while (true)
                {
                    Console.Write("Sort by (filename/type, default is filename): ");
                    sort = Console.ReadLine()?.Trim();
                    if (string.IsNullOrEmpty(sort))
                    {
                        sort = "filename";
                        break;
                    }
                    if (sort == "filename" || sort == "type")
                    {
                        break;
                    }
                    Console.WriteLine("Invalid input. Please enter 'filename' or 'type'.");
                }
                bool removeEmptyLines = true;
                while (true)
                {
                    Console.Write("Remove empty lines (true/false, default true): ");
                    var removeInput = Console.ReadLine()?.Trim();
                    if (string.IsNullOrEmpty(removeInput))
                    {
                        break; 
                    }
                    if (bool.TryParse(removeInput, out removeEmptyLines))
                    {
                        break;
                    }
                    Console.WriteLine("Invalid input. Please enter 'true' or 'false' for removing empty lines.");
                }
                Console.Write("Author's name (optional): ");
                var author = Console.ReadLine()?.Trim();
                author = string.IsNullOrEmpty(author) ? "unknown" : author;
                var rspContent = $"-l {language}\n" +
                                 $"-o {output}\n" +
                                 $"-n {note}\n" +
                                 $"-s {sort}\n" +
                                 $"-r {removeEmptyLines}\n" +
                                 $"-a {author}";
                File.WriteAllText(@"C:\CustomCommands\configs\bundle.rsp", rspContent);
                Console.WriteLine("Response file created: bundle.rsp");
            });
            return command;
        }
    }
}
using System.CommandLine;
using System.CommandLine.Invocation;
using codeBundler.Commands;
using System;
var rootCommand = new RootCommand("CodeBundler CLI")
{
    BundleCommand.CreateCommand(),
    CreateRspCommand.CreateCommand()
};
return await rootCommand.InvokeAsync(args);
